# This database implements a 2-D coordinate transformation, copied from sum2diff
# two slit blades, M1 and M2 
# transform to Gap and Ctr, where
#  Gap = M1 - M2
#  Ctr = (M1 + M2)/2  (NSLS-II standard coordinates)
#    M1 = (Ctr + Gap/2)
#    M2 = (Ctr - Gap/2) 
# 
# for the motors to move.
grecord(ao,"$(P)$(CTR)DVAL") {
	field(FLNK, "$(P)$(T)LimitCheck")
	field(FLNK, "$(P)$(T)Drive")
}
grecord(ao,"$(P)$(GAP)DVAL") {
	field(FLNK, "$(P)$(T)LimitCheck")
	field(FLNK, "$(P)$(T)Drive")
}

# This record is processed whenever the soft motor records CTR or GAP write
# new values to the DVAL records above.
# Note: the INPA and INPB fields get their values directly from the .DVAL
# fields of the soft motor records, rather than from the DVAL record above.
# This is because the .DVAL fields are always correct, while the DVAL records
# do not get updated when the soft motor .DVAL fields are modified in SET mode.
grecord(transform,"$(P)$(T)Drive") {
	field(INPA,"$(P)$(CTR).DVAL NPP NMS")
	field(INPB,"$(P)$(GAP).DVAL NPP NMS")
	field(INPC,"$(P)$(CTR).VELO NPP NMS")
	field(CLCG,"A+B/2")
        field(OUTG,"$(P)$(M1).VAL PP MS")
	field(CLCH,"A-B/2")
        field(OUTH,"$(P)$(M2).VAL PP MS")
	field(CLCC,"C")
        field(OUTC,"$(P)$(M1).VELO PP MS")
	field(CLCD,"C")
        field(OUTD,"$(P)$(M2).VELO PP MS")
	field(CLCE,"C")
        field(OUTE,"$(P)$(GAP).VELO PP MS")
	field(PREC,"$(PREC)")
}

# This record calculates the readback positions of the soft motors.  It 
# processes whenever the readbacks of the real motors change, or whenever
# one of the the geometry constants changes.
# clcG => GAP readback; clcH => CTR readback
grecord(transform,"$(P)$(T)Readback") {
	field(INPA,"$(P)$(M1).RBV CP MS")
	field(INPB,"$(P)$(M2).RBV CP MS")
	field(CLCG,"A-B")
	field(CLCH,"(A+B)/2")
	field(IVLA,"Do Nothing")
	field(PREC,"$(PREC)")
}

# This record processes if either of the soft motor STOP fields is set.
grecord(dfanout,"$(P)$(T)Stop") {
        field(VAL,"1")
        field(OUTA,"$(P)$(M1).STOP PP MS")
        field(OUTB,"$(P)$(M2).STOP PP MS")
}

# This record computes whether the compound motor is done moving.  
# It goes to 1 when both real motors are done moving.
# positions of the real motors.
grecord(calcout,"$(P)$(T)Done") {
        field(INPA,"$(P)$(M1).DMOV CP MS")
        field(INPB,"$(P)$(M2).DMOV CP MS")
        field(CALC,"A & B")
}

# This record check if any real motor Limit is violated, LVIO = 1, 
# then all motor should stop
grecord(transform, "$(P)$(T)Limitcheck"){
   field(INPA,"$(P)$(M1).LVIO CP MS")
   field(INPB,"$(P)$(M2).LVIO CP MS")
   field(CLCC,"A || B")
   field(OUTC, "$(P)$(M1).STOP PP MS")
   field(CLCD,"A || B")
   field(OUTD, "$(P)$(M2).STOP PP MS")
   field(CLCE,"A || B")
   field(OUTE, "$(P)$(CTR)_able PP MS")
   field(CLCF,"A || B")
   field(OUTF, "$(P)$(GAP)_able PP MS")
}

# if one of the motor is STOPed, cancel movement - stop both
grecord(calcout, "$(P)$(T)cancel"){
   field(INPA,"$(P)$(M1).DMOV CP MS")
   field(INPB,"$(P)$(M2).DMOV CP MS")
   field(CALC,"A || B")
   field(OOPT,"On Change")
   field(OUT, "$(P)$(T)Stop PP MS")
}
